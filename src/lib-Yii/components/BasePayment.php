<?php
/**
 * Базовый класс Платежей. 
 * Класс есть прослойка между классом ActiveRecord и Payment
 * 
 * @author Kustarov Dmitriy <dkustarov@home-studio.pro>
 * @package Hs\Models
 */
abstract class BasePayment extends ActiveRecord
{
    
    /**
     * Поле хранит статус оплаты за платеж
     * 
     * @var String
     */
    public $status;
    
    /**
     * Дата создания платежа
     * 
     * @sqltype DATETIME
     * @var String
     * Дата создания платежа
     */
    public $creationDate;
    
    /**
     * Дата последней обработки платежа
     * 
     * @sqltype DATETIME
     * @var String
     */
    public $actionDate;
    
    /**
     * Уникальный идентификатор платежа в платежной системе
     * 
     * @var String
     * @autogenerated 25-12-2016
     */
    public $uniqueId;
    
    /**
     * @var String. 
     * Статус что это новый платеж
     */
    
    const STATUS_NEW = 'new';
    
    /**
     * @var String. 
     * Статус что платеж процессится
     */
    
    const STATUS_WAITING = 'waiting';
    
    /**
     * @var String. 
     * Статус что платеж завершился успехом
     */
    const STATUS_COMPLETE = 'complete';
    
    /**
     * @var String. 
     * Статус что платеж завершился неуспешно
     */
    const STATUS_FAILED = 'failed';
    
     /**
     * Конструктор
     * @param String $scenario параметр по умолчанию для вставки значений в таблицу
     */
    public function __construct($scenario = 'insert') 
    {
        $ret = parent::__construct($scenario);
        $this->creationDate = DateTimeHelper::timestampToMysqlDateTime();
        return $ret;
    }
    
     /**
     * Метод возвращает описание плетежа
     * @return String
     */    
    public abstract function getTitle();
    
    /**
     * Метод возвращает цену за плетежа
     * @return String
     */
    public abstract function getPrice();
     
    /**
     * Метод возвращает валюту платежа
     * @return String
     */    
    public abstract function getCurrency();
    
    /**
     * Установка уникального идентификатора платежа
     * 
     * @param String $id Идентификатор платежа
     */
    public function setPaymentId($id)
    {
        $this->uniqueId = $id;
    }
    
    /**
     * Метод который сохраняет данные о платеже в бд при успешной обработки платежа
     * @return  $this
     */    
    public function complete()
    {
        $this->status = self::STATUS_COMPLETE;
        $this->actionDate = DateTimeHelper::timestampToMysqlDateTime();
        $this->save();
        
        return $this;
    }
    
    /**
     * Метод который сохраняет данные о платеже в бд при неуспешной обработки платежа
     * @return  $this
     */   
    public function fail()
    {
        $this->status = self::STATUS_FAILED;
        $this->actionDate = DateTimeHelper::timestampToMysqlDateTime();
        $this->save();
        
        return $this;
    }
    
    /**
     * Метод который надо вызвать на старте платежа для его иницилизации
     * @return  $this
     */    
    public function start()
    {
        if($this->status == self::STATUS_COMPLETE)
            throw new Exception("This payment is already completed");
        
        $this->status = self::STATUS_NEW;
        $this->save();
        return $this;
    }
    
    /**
     * Метод возвращает уникальный идентификатор платежа
     * @return String
     */    
    public function getPaymentId()
    {     
        return $this->uniqueId;
    }
    
    /**
     * Получение цены платежа для отображения
     * 
     * @return string
     */
    public function getPriceString()
    {
        $currency = $this->getCurrencySymbol();
        
        $price =  $this->getPrice();
        $str =  $currency.StringHelper::formatDecimal($price);
        return $str;
    }


    /**
     * Получение символа валюты
     * 
     * @return string
     */
    public function getCurrencySymbol()
    {
        $str = "";
        switch($this->getCurrency())
        {
            case "RUB" : $str = "р"; break;
            case "USD" : $str = "$"; break;
            case "EUR" : $str = "&#8364;"; break;
        }
        
        return $str;
    }
}