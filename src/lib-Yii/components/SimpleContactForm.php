<?php

/**
 * Форма обратной связи с отправкой на почту
 * 
 * @author Ekaterina Dudochkina <edudochkina@home-studio.pro>
 * @package Hs\Forms
 */
class SimpleContactForm extends ActiveRecord {

     /**
     * Первичный ключ
     * 
     * @var Integer
     * @autogenerated 22-11-2016
     */
    public $id;

    /**
     * Имя отправителя
     * 
     * @var String
     * @autogenerated 22-11-2016
     */
    public $name = null;

    /**
     * Описание
     * 
     * @var String
     * @autogenerated 22-11-2016
     */
    public $description = null;

    /**
     * Дата отправки
     * 
     * @sqltype DATETIME
     * @var String
     * @autogenerated 22-11-2016
     */
    public $date ;

    /**
     * Контакты
     * 
     * @var String
     * @autogenerated 22-11-2016
     */
    public $contacts = null;


    
    /**
     *  Возвращает правила валидации.
     * <b>Внимание: для полей у которых в БД тип VARCHAR необходимо создать валидатор "length".</b>
     * 
     * @autogenerated 22-11-2016
     * @return Array[] Массив правил валидации
     */
    public function rules()
    {
        $arr = parent::rules();
        $arr[] = array('date','type','type' => 'datetime','datetimeFormat' => 'yyyy-MM-dd hh:mm:ss');
        $arr[] = array('name','length','max' => 250);
        $arr[] = array('name,description,contacts,date','safe');
        $arr[] = array('name,contacts','required');
        return $arr;
    }
    
    /**
     * Возвращает массив связей моделей.
     * <b>Внимание: связи BELONGS_TO являются внешними ключами.</b> Для них можно указать поведение при удалений родительской сущности.
     * 
     * @autogenerated 22-11-2016
     * @return Array[] Массив связей
     */
    public function relations()
    {
        $arr = parent::relations();
        return $arr;
    }
    
    /**
     * Возвращает информацию о том, как называются поля на человеческом языке.
     * 
     * @autogenerated 22-11-2016
     * @return String[] Массив лейблов для полей (name=>label)
     */
    public function attributeLabels()
    {
        $arr = parent::attributeLabels();
        $arr["id"] = "Id";
        $arr["name"] = "Name";
        $arr["description"] = "Message";
        $arr["date"] = "Date";
        $arr["contacts"] = "Contacts";
        return $arr;
    }
    
    /**
     * Возвращает новую модель данного класса. 
     * Этот метод необязателен, но улучшает работу подсказок.
     * 
     * @autogenerated 22-11-2016
     * @param String $className Имя класса модели
     * @return SimpleContactForm пустой объект модели
     */
    public static function model($className = __CLASS__)
    {
        return parent::model($className);
    }
    
    /**
     * Получение имени таблицы в базе данных
     *
     * @autogenerated 22-11-2016
     * @return String Название таблицы
     */
    public function tableName()
    {
        return 'contactforms';
    } 

    
     public function __construct($scenario = 'insert') 
    {
        $ret = parent::__construct($scenario);
        $this->date = DateTimeHelper::timestampToMysqlDateTime();
        return $ret;
    }
   

    /**
     * Отправляем уведомление по эл. почте, чтобы быстрее ответить на заявку
     * @param string $email Почта на которую будет отправляться заявка
     * @param  $controller Контроллер
     */
    public function sendMessage($email, $controller) {
        //Создаем письмо.
        $text = "Name:" . $this->name . "<br/>";
        $text2 = $this->contacts !== "" ? $text2 = $text . "Contact: " . $this->contacts . "<br/>" : $text2 = $text;
        $text3 = $text2 . "Description: " . $this->description . "<br/>";
        $body = $text3;
        $textTitle = "A new request to call back from the " . $this->name;
        $title = $textTitle;
        $mailer = $controller->getMailer();

        $mailer->AddAddress($email);
        $mailer->Subject = $title;
        $mailer->Body = $body;
        $mailer->Send();

        return true;
    }

}
