<?php

/**
 * Запись в блоге
 * 
 * @package Hs\Models
 * @property Image $image Изображение к статье
 * @autogenerated 02-03-2017
 */
class BlogArticle extends ActiveRecord implements ISeoMeta
{

    /**
     * Первичный ключ
     * 
     * @var Integer
     * @autogenerated 02-03-2017
     */
    public $id;

    /**
     * Название
     * 
     * @var String
     * @autogenerated 02-03-2017
     */
    public $title = null;

    /**
     * Ключевые слова
     * 
     * @var String
     * @autogenerated 02-03-2017
     */
    public $keywords = null;

    /**
     * Ключевые слова
     * 
     * @var String
     * @autogenerated 02-03-2017
     */
    public $description = null;

    /**
     * Предварительный просмотр
     * 
     * @var String
     * @autogenerated 02-03-2017
     */
    public $preview = null;

    /**
     * Полный текст
     * 
     * @var String
     * @autogenerated 02-03-2017
     */
    public $text = null;

    /**
     * Дата создания
     * 
     * @sqltype DATETIME
     * @var String
     * @autogenerated 02-03-2017
     */
    public $creationDate;

    /**
     * Главная картинка
     * 
     * @var Integer
     * @autogenerated 02-03-2017
     */
    public $mainImage;

    /**
     *
     * Автор
     * @var String
     */
    public $author;

    /**
     * Constructor.
     * @param string $scenario scenario name. See {@link CModel::scenario} for more details about this parameter.
     * Note: in order to setup initial model parameters use {@link init()} or {@link afterConstruct()}.
     * Do NOT override the constructor unless it is absolutely necessary!
     */
    public function __construct($scenario = 'insert')
    {
        $this->creationDate = DateTimeHelper::timestampToMysqlDateTime();
        parent::__construct($scenario);
    }

    /**
     *  Возвращает правила валидации.
     * <b>Внимание: для полей у которых в БД тип VARCHAR необходимо создать валидатор "length".</b>
     * 
     * @autogenerated 02-03-2017
     * @return Array[] Массив правил валидации
     */
    public function rules()
    {
        $arr = parent::rules();
        $arr[] = array('title,creationDate', 'required');
        $arr[] = array('mainImage', 'numerical', 'integerOnly' => true);
        $arr[] = array('text,author,preview,keywords,description', 'safe');
        $arr[] = array('creationDate', 'type', 'type' => 'datetime', 'datetimeFormat' => 'yyyy-MM-dd hh:mm:ss');
        return $arr;
    }

    /**
     * Возвращает массив связей моделей.
     * <b>Внимание: связи BELONGS_TO являются внешними ключами.</b> Для них можно указать поведение при удалений родительской сущности.
     * 
     * @autogenerated 02-03-2017
     * @return Array[] Массив связей
     */
    public function relations()
    {
        $arr = parent::relations();
        $arr["image"] = [self::BELONGS_TO, "Image", "mainImage"];
        return $arr;
    }

    /**
     * Возвращает информацию о том, как называются поля на человеческом языке.
     * 
     * @autogenerated 02-03-2017
     * @return String[] Массив лейблов для полей (name=>label)
     */
    public function attributeLabels()
    {
        $arr = parent::attributeLabels();
        $arr["id"] = "Id";
        $arr["title"] = "Title";
        $arr["keywords"] = "Keywords";
        $arr["description"] = "Description";
        $arr["preview"] = "Preview";
        $arr["text"] = "Text";
        $arr["creationDate"] = "Creation date";
        $arr["mainImage"] = "MainImage";
        return $arr;
    }

    /**
     * Получение дня даты создания статьи
     * 
     * @return String
     */
    public function getCreateDay()
    {
        $data = null;
        $data1 = $this->creationDate;
        if ($data1 !== null)
        {
            $data2 = explode(' ', $data1);
            $data3 = explode('-', $data2[0]);
            $data = $data3[2];
        }
        return $data;
    }

    /**
     * Получение даты создания статьи
     * 
     * @return String
     */
    public function getDate()
    {
        $time = DateTimeHelper::MysqlDateTimeToTimestamp($this->creationDate);

        $date = date("d.m.Y", $time);
        return $date;
    }

    /**
     * Получение содержимого тега Description.
     * Описание страницы, отображаемого в поисковике.
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Получение содержимого тега Keywords.
     * Описание ключевых слов и фраз через запятую для поисковика.
     */
    public function getKeywords()
    {
        return $this->keywords;
    }

}
