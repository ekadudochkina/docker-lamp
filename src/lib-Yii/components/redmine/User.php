<?php

namespace Hs\Redmine;

/**
 * Пользователь Redmine	
 *
 * @package Hs\Redmine
 * @author Sarychev Alexei <freddis336@gmail.com>
 */
class User extends \RemappedActiveRecord
{

    /**
     * Первичный ключ
     * 
     * @var Integer
     * @autogenerated 13-06-2016
     */
    public $id;
    public $email;

    /**
     * КОММЕНТАРИЙ
     * 
     * @var String
     * @autogenerated 13-06-2016
     */
    protected $login = '';

    /**
     * КОММЕНТАРИЙ
     * 
     * @var String
     * @autogenerated 13-06-2016
     */
    protected $hashed_password = '';

    /**
     * КОММЕНТАРИЙ
     * 
     * @var String
     * @autogenerated 13-06-2016
     */
    public $firstname = '';

    /**
     * КОММЕНТАРИЙ
     * 
     * @var String
     * @autogenerated 13-06-2016
     */
    public $lastname = '';

    /**
     * КОММЕНТАРИЙ
     * 
     * @var String
     * @autogenerated 13-06-2016
     */
    protected $mail = '';

    /**
     * КОММЕНТАРИЙ
     * 
     * @var Boolean
     * @autogenerated 13-06-2016
     */
    protected $admin = false;

    /**
     * КОММЕНТАРИЙ
     * 
     * @var Integer
     * @autogenerated 13-06-2016
     */
    public $status = 1;

    /**
     * КОММЕНТАРИЙ
     * 
     * @sqltype DATETIME
     * @var String
     * @autogenerated 13-06-2016
     */
    protected $last_login_on = null;

    /**
     * КОММЕНТАРИЙ
     * 
     * @var String
     * @autogenerated 13-06-2016
     */
    protected $language = '';

    /**
     * КОММЕНТАРИЙ
     * 
     * @var Integer
     * @autogenerated 13-06-2016
     */
    protected $auth_source_id = null;

    /**
     * КОММЕНТАРИЙ
     * 
     * @sqltype DATETIME
     * @var String
     * @autogenerated 13-06-2016
     */
    protected $created_on = null;

    /**
     * КОММЕНТАРИЙ
     * 
     * @sqltype DATETIME
     * @var String
     * @autogenerated 13-06-2016
     */
    protected $updated_on = null;

    /**
     * КОММЕНТАРИЙ
     * 
     * @var String
     * @autogenerated 13-06-2016
     */
    protected $type = null;

    /**
     * КОММЕНТАРИЙ
     * 
     * @var String
     * @autogenerated 13-06-2016
     */
    protected $identity_url = null;

    /**
     * КОММЕНТАРИЙ
     * 
     * @var String
     * @autogenerated 13-06-2016
     */
    protected $mail_notification = '';

    /**
     * КОММЕНТАРИЙ
     * 
     * @var String
     * @autogenerated 13-06-2016
     */
    protected $salt = null;

    /**
     * КОММЕНТАРИЙ
     * 
     * @var Boolean
     * @autogenerated 13-06-2016
     */
    protected $must_change_passwd = false;

    /**
     * КОММЕНТАРИЙ
     * 
     * @sqltype DATETIME
     * @var String
     * @autogenerated 13-06-2016
     */
    public $passwd_changed_on = null;

    /**
     *  Возвращает правила валидации.
     * <b>Внимание: для полей у которых в БД тип VARCHAR необходимо создать валидатор "length".</b>
     * 
     * @autogenerated 13-06-2016
     * @return Array[] Массив правил валидации
     */
    public function rules()
    {
        $arr = parent::rules();
        $arr[] = array('login, hashed_password, firstname, lastname, mail, admin, status, mail_notification, must_change_passwd', 'required');
        $arr[] = array('admin, must_change_passwd', 'boolean');
        $arr[] = array('status, auth_source_id', 'numerical', 'integerOnly' => true);
        $arr[] = array('last_login_on, created_on, updated_on, passwd_changed_on', 'type', 'type' => 'datetime', 'datetimeFormat' => 'yyyy-MM-dd hh:mm:ss');
        $arr[] = array('login, lastname, type, identity_url, mail_notification', 'length', 'max' => 255);
        $arr[] = array('salt', 'length', 'max' => 64);
        $arr[] = array('mail', 'length', 'max' => 60);
        $arr[] = array('hashed_password', 'length', 'max' => 40);
        $arr[] = array('firstname', 'length', 'max' => 30);
        $arr[] = array('language', 'length', 'max' => 5);
        return $arr;
    }

    /**
     * Возвращает массив связей моделей.
     * <b>Внимание: связи BELONGS_TO являются внешними ключами.</b> Для них можно указать поведение при удалений родительской сущности.
     * 
     * @autogenerated 13-06-2016
     * @return Array[] Массив связей
     */
    public function relations()
    {
        $arr = parent::relations();
        $arr["projects"] = [self::MANY_MANY, "Hs\Redmine\Project", "members(user_id, project_id)"];
        return $arr;
    }

    /**
     * Возвращает информацию о том, как называются поля на человеческом языке.
     * 
     * @autogenerated 13-06-2016
     * @return String[] Массив лейблов для полей (name=>label)
     */
    public function attributeLabels()
    {
        $arr = parent::attributeLabels();
        $arr["id"] = "Id";
        $arr["login"] = "Login";
        $arr["hashed_password"] = "Hashed";
        $arr["firstname"] = "Firstname";
        $arr["lastname"] = "Lastname";
        $arr["mail"] = "Mail";
        $arr["admin"] = "Admin";
        $arr["status"] = "Status";
        $arr["last_login_on"] = "Last";
        $arr["language"] = "Language";
        $arr["auth_source_id"] = "Auth";
        $arr["created_on"] = "Created";
        $arr["updated_on"] = "Updated";
        $arr["type"] = "Type";
        $arr["identity_url"] = "Identity";
        $arr["mail_notification"] = "Mail";
        $arr["salt"] = "Salt";
        $arr["must_change_passwd"] = "Must";
        $arr["passwd_changed_on"] = "Passwd";
        return $arr;
    }

    /**
     * Возвращает новую модель данного класса. 
     * Этот метод необязателен, но улучшает работу подсказок.
     * 
     * @autogenerated 13-06-2016
     * @param String $className Имя класса модели
     * @return RedmineUser пустой объект модели
     */
    public static function model($className = __CLASS__)
    {
        return parent::model($className);
    }

    /**
     * Получение имени таблицы в базе данных
     *
     * @autogenerated 13-06-2016
     * @return String Название таблицы
     */
    public function tableName()
    {
        return 'redmine.users';
    }

    /**
     * Получение массива конвертации имен полей
     * @return string[]
     */
    public function getMappings()
    {
        $arr = array();
        $arr["mail"] = "email";
        return $arr;
    }

    /**
     * Получение имейла пользователя
     * 
     * @return String
     */
    public function getEmail()
    {
        $email = Email::model()->findByAttributes(["userId" => $this->getPk()]);
        if (!$email)
        {
            return null;
        }
        //\bug::drop($email);
        //$first = \ArrayHelper::getFirst($emails);
        return $email->value;
    }

    /**
     * Получает значение дополнительного поля для проекта. Такие поля могут добавлять администраторы.
     * 
     * @todo Изменить функцию для работы с реальными значениями, вместо тестовых
     * @param String $name Название дополнительного поля
     * @return String| null Значение дополнительного поля
     */
    public function getCustomField($name)
    {
        switch ($this->login)
        {
            case "freddis" : return 60000;
            case "kosatkin" : return 20000;
            case "edudochkina" : return 40000;
            case "akleshnev" : return 25000;
            case "klarin" : return 35000;
            default: return 30000;
        }
    }

}
