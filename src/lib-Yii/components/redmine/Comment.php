<?php
namespace Hs\Redmine;
/**
 * Комментарий в редмайн
 *
 * @package Hs\Redmine
 * @author Sarychev Alexei <freddis336@gmail.com>
 */
class Comment extends \RemappedActiveRecord
{
    public $userId;
    public $type;
    public $objectId;
    public $creationDate;
    public $text;
    
    /**
     * Первичный ключ
     * 
     * @var Integer
     * @autogenerated 13-06-2016
     */
    public $id;

    /**
     * КОММЕНТАРИЙ
     * 
     * @var Integer
     * @autogenerated 13-06-2016
     */
    public $journalized_id = 0;

    /**
     * КОММЕНТАРИЙ
     * 
     * @var String
     * @autogenerated 13-06-2016
     */
    public $journalized_type = '';

    /**
     * КОММЕНТАРИЙ
     * 
     * @var Integer
     * @autogenerated 13-06-2016
     */
    public $user_id = 0;

    /**
     * КОММЕНТАРИЙ
     * 
     * @var String
     * @autogenerated 13-06-2016
     */
    public $notes = null;

    /**
     * КОММЕНТАРИЙ
     * 
     * @sqltype DATETIME
     * @var String
     * @autogenerated 13-06-2016
     */
    public $created_on;

    /**
     * КОММЕНТАРИЙ
     * 
     * @var Boolean
     * @autogenerated 13-06-2016
     */
    public $private_notes = false;


    public function __construct($scenario = 'insert')
    {
	$this->creationDate = DateTimeHelper::timestampToMysqlDateTime();
	parent::__construct($scenario);
    }

    /**
     *  Возвращает правила валидации.
     * <b>Внимание: для полей у которых в БД тип VARCHAR необходимо создать валидатор "length".</b>
     * 
     * @autogenerated 13-06-2016
     * @return Array[] Массив правил валидации
     */
    public function rules()
    {
        $arr = parent::rules();
        $arr[] = array('journalized_id, journalized_type, user_id, created_on','required');
        $arr[] = array('private_notes','boolean');
        $arr[] = array('journalized_id, user_id','numerical','integerOnly' => true);
        $arr[] = array('created_on','type','type' => 'datetime','datetimeFormat' => 'yyyy-MM-dd hh:mm:ss');
        $arr[] = array('journalized_type','length','max' => 30);
        return $arr;
    }
    
    /**
     * Возвращает массив связей моделей.
     * <b>Внимание: связи BELONGS_TO являются внешними ключами.</b> Для них можно указать поведение при удалений родительской сущности.
     * 
     * @autogenerated 13-06-2016
     * @return Array[] Массив связей
     */
    public function relations()
    {
        $arr = parent::relations();
        return $arr;
    }
    
    public function tableName()
    {
	return "redmine.journals";
    }

    /**
     * Получение массива конвертации имен полей
     * @return string[]
     */
    public function getMappings()
    {
	$arr = array();
	$arr['created_on'] = "creationDate";
	$arr['notes'] = "text";
	$arr['journalized_type'] = "type";
	$arr['journalized_id'] = "objectId";
	$arr['user_id'] = "userId";
	return $arr;
    }

}
