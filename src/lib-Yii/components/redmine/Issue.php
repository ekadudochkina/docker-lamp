<?php

namespace Hs\Redmine;

use HS\Redmine;

/**
 * Задача в редмайн
 * 
 * @package Hs\Redmine
 * @property RedmineUser $author Автор задачи 
 * @property RedmineUser $assignee Текущий исполнитель задачи 
 * @property SpentTime[] $time Затраченное время
 * @property IssueRelation[] $relatesFrom Связанные задачи
 * @property IssueRelation[] $relatesTo Связанные задачи
 * @author Sarychev Alexei <freddis336@gmail.com>
 */
class Issue extends \RemappedActiveRecord
{

    public $title;
    public $projectId;
    public $parentId;
    public $trackerId;
    public $creationDate;
    public $updateDate;
    public $authorId;
    public $assigneeId;
    public $statusId;
    public $priorityId;
    public $estimatedHours;
    public $isPrivate;
    public $rootId;
    public $doneRatio;
    public $dueDate;

    /**
     * Первичный ключ
     * 
     * @var Integer
     * @autogenerated 13-06-2016
     */
    public $id;

    /**
     * КОММЕНТАРИЙ
     * 
     * @var Integer
     * @autogenerated 13-06-2016
     */
    protected $tracker_id;

    /**
     * КОММЕНТАРИЙ
     * 
     * @var Integer
     * @autogenerated 13-06-2016
     */
    protected $project_id;

    /**
     * КОММЕНТАРИЙ
     * 
     * @var String
     * @autogenerated 13-06-2016
     */
    protected $subject = '';

    /**
     * КОММЕНТАРИЙ
     * 
     * @var String
     * @autogenerated 13-06-2016
     */
    protected $description = null;

    /**
     * КОММЕНТАРИЙ
     * 
     * @sqltype DATE
     * @var String
     * @autogenerated 13-06-2016
     */
    protected $due_date = null;

    /**
     * КОММЕНТАРИЙ
     * 
     * @var Integer
     * @autogenerated 13-06-2016
     */
    protected $category_id = null;

    /**
     * КОММЕНТАРИЙ
     * 
     * @var Integer
     * @autogenerated 13-06-2016
     */
    protected $status_id;

    /**
     * КОММЕНТАРИЙ
     * 
     * @var Integer
     * @autogenerated 13-06-2016
     */
    public $assigned_to_id = null;

    /**
     * КОММЕНТАРИЙ
     * 
     * @var Integer
     * @autogenerated 13-06-2016
     */
    protected $priority_id;

    /**
     * КОММЕНТАРИЙ
     * 
     * @var Integer
     * @autogenerated 13-06-2016
     */
    protected $fixed_version_id = null;

    /**
     * Автор задачи (Внешний ключ)
     * 
     * @var Integer
     * @autogenerated 13-06-2016
     */
    public $author_id;

    /**
     * КОММЕНТАРИЙ
     * 
     * @var Integer
     * @autogenerated 13-06-2016
     */
    protected $lock_version = 0;

    /**
     * КОММЕНТАРИЙ
     * 
     * @sqltype DATETIME
     * @var String
     * @autogenerated 13-06-2016
     */
    protected $created_on = null;

    /**
     * КОММЕНТАРИЙ
     * 
     * @sqltype DATETIME
     * @var String
     * @autogenerated 13-06-2016
     */
    protected $updated_on = null;

    /**
     * КОММЕНТАРИЙ
     * 
     * @sqltype DATE
     * @var String
     * @autogenerated 13-06-2016
     */
    protected $start_date = null;

    /**
     * КОММЕНТАРИЙ
     * 
     * @var Integer
     * @autogenerated 13-06-2016
     */
    protected $done_ratio = 0;

    /**
     * КОММЕНТАРИЙ
     * 
     * @var Double
     * @autogenerated 13-06-2016
     */
    protected $estimated_hours = null;

    /**
     * КОММЕНТАРИЙ
     * 
     * @var Integer
     * @autogenerated 13-06-2016
     */
    public $parent_id = null;

    /**
     * КОММЕНТАРИЙ
     * 
     * @var Integer
     * @autogenerated 13-06-2016
     */
    protected $root_id = null;

    /**
     * КОММЕНТАРИЙ
     * 
     * @var Integer
     * @autogenerated 13-06-2016
     */
    protected $lft = null;

    /**
     * КОММЕНТАРИЙ
     * 
     * @var Integer
     * @autogenerated 13-06-2016
     */
    protected $rgt = null;

    /**
     * КОММЕНТАРИЙ
     * 
     * @var Boolean
     * @autogenerated 13-06-2016
     */
    protected $is_private = false;

    /**
     * Дата закрытия задачи
     * 
     * @sqltype DATETIME
     * @var String
     * @autogenerated 13-06-2016
     */
    protected $closed_on = null;
    
    public function __construct($scenario = 'insert')
    {
        $this->creationDate = \DateTimeHelper::timestampToMysqlDateTime();
        $this->updateDate = \DateTimeHelper::timestampToMysqlDateTime();
        parent::__construct($scenario);
    }

    public function tableName()
    {
        return "redmine.issues";
    }

    /**
     * Получение массива конвертации имен полей
     * @return string[]
     */
    public function getMappings()
    {
        $arr = array();
        $arr['subject'] = "title";
        $arr['author_id'] = "authorId";
        $arr['assigned_to_id'] = "assigneeId";
        $arr['tracker_id'] = "trackerId";
        $arr['project_id'] = "projectId";
        $arr['parent_id'] = "parentId";
        $arr['created_on'] = "creationDate";
        $arr['updated_on'] = "updateDate";
        $arr['status_id'] = "statusId";
        $arr['priority_id'] = "priorityId";
        $arr['estimated_hours'] = "estimatedHours";
        $arr['is_private'] = "isPrivate";
        $arr['root_id'] = "rootId";
        $arr['done_ratio'] = "doneRatio";
        $arr['due_date'] = "dueDate";

        return $arr;
    }

    /**
     * Получение имени оригинального из маппингов
     * 
     * @todo Данному методу тут явно не место
     * @param String $mapping Имя маппинга
     * @return String Название поля
     * @throws Exception Исключение, если поле отсутствует
     */
    public function getFieldForMapping($mapping)
    {
        $maps = $this->getMappings();
        $flipped = array_flip($maps);
        if (!isset($flipped[$mapping]))
        {
            throw new Exception("No such mapping: '$mapping'");
        }

        $result = $flipped[$mapping];
        return $result;
    }

    public function relations()
    {
	$arr = parent::relations();
	$arr['assignee'] = array(self::BELONGS_TO,"User","assigned_to_id");
	$arr['author'] = array(self::BELONGS_TO,"User","author_id");
	$arr['project'] = array(self::BELONGS_TO,"Hs\Redmine\Project","project_id");
	$arr['parent'] = array(self::BELONGS_TO,"Hs\Redmine\Issue","parent_id");
	$arr['time'] = array(self::HAS_MANY,"Hs\Redmine\SpentTime","issue_id");
        $arr["relatesFrom"] = array(self::HAS_MANY,"Hs\Redmine\IssueRelation","issue_from_id");
        $arr["relatesTo"] = array(self::HAS_MANY,"Hs\Redmine\IssueRelation","issue_to_id");
	return $arr;
    }

    /**
     * Создает комментарий от имени назначенного пользователя в задачае редмайн.
     * 
     * @param String $text Текст комментария
     * @return Bool True, в случае успеха
     */
    public function createCommentFromAuthor($text)
    {
        $comment = new RedmineComment();
        $comment->text = $text;
        $comment->userId = $this->author->getPk();
        $comment->objectId = $this->getPk();
        $comment->type = "Issue";
        //bug::drop($comment);
        return $comment->save();
    }

}
