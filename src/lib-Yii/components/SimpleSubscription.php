<?php

/**
 * Базовый класс Подписок. 
 * Класс есть прослойка между классом ActiveRecord и Subscription
 * 
 * @author Kustarov Dmitriy <dkustarov@home-studio.pro>
 * @package Hs\Models
 */

abstract class SimpleSubscription extends ActiveRecord implements ISubscription{
    
    /**
     * Статус подписки
     * 
     * @var String
     * @autogenerated 02-06-2016
     */
    public $status;

    /**
     * Дата создания подписки
     * 
     * @sqltype DATETIME
     * @var String
     * @autogenerated 02-06-2016
     */
    public $creationDate;
    
    /**
     * Дата активации или отмены  подписки
     * 
     * @sqltype DATETIME
     * @var String
     * @autogenerated 02-06-2016
     */
    public $actionDate;
    
    /**
     * Ссылка на модель подписчика
     * @var ActiveRecord 
     * @autogenerated 02-06-2016
     */
    protected $payer;
    
    /**
     * Ссылка на модель сервиса
     * @var IService 
     * @autogenerated 02-06-2016
     */
    protected $service;
    
    /**
     * Уникальный идентификатор подписки
     * @var String
     * @autogenerated 02-06-2016
     */
    public $uniqueIdentificatorSubscription;

    /**
     * @var String. 
     * Статус что это новая подписка
     */
    const STATUS_NEW='New';
    
    /**
     * @var String. 
     * Статус что подписка активная
     */
    const STATUS_ON='Active';
    
    /**
     * @var String. 
     * Статус что подписка отменена
     */
    const STATUS_OFF='Canceled';
    
    /**
     * @var String. 
     * Статус означает что пользователь отказался подписаться на услугу
     */
    const STATUS_FAIL='Fail';
    
    /**
     * @var String. 
     * Статус значит, что мы ещё не получили Уникальный идентификатор подписки
     */
    const NEW_SUBSCRIPTION_IDENTIFICATOR='NEW';
    
    public function __construct($scenario = 'insert') {
        $ret = parent::__construct($scenario);
        $this->creationDate = DateTimeHelper::timestampToMysqlDateTime();
        return $ret;
    }
    
    /**
     * Метод вернет идетнификатор подписчика
     * @return  Integer
     */
    public function getPayerId()
    {
        return $this->payer->getPk();
    }
    
    /**
     * Метод сохраняет модель подписчика
     * @param ActiveRecord $payer ссылка на объект подписчика
     */
    public function setPayer(ActiveRecord $payer)
    {
        $this->payer = $payer;
    }
    
    /**
     * Метод сохраняет модель сервиса
     * @param IService $service ссылка на объект сервиса
     */
    public function setService(IService $service)
    {
        $this->service = $service;
    }
    
    /**
     * Метод вернет модель сервиса на который мы делаем подписку
     * @return  IService
     */
    public function getService()
    {
            return $this->service;
    }
    
    /**
     * Является ли подписка активной в данный момент
     * 
     * @return String
     */
    public function isActive()
    {
        return $this->status == self::STATUS_ON;
    }
    
    /**
     * Метод который сохраняет данные о подписке. Вызывается на старте формирования подписки
     * @return  SimpleSubscription
     */  
    public function start(){
        
        if($this->status != self::STATUS_NEW)
            throw new Exception("This subscription is already turn on");
        
        $this->setSubscriptionFields();
        $saved = $this->save();
        
        return $saved;   
    }
    
    /**
     * Метод устанавливает значение полей подписки
     */  
    protected function setSubscriptionFields() 
    {
        $this->uniqueIdentificatorSubscription = self::NEW_SUBSCRIPTION_IDENTIFICATOR;
        $this->payerId = $this->getPayerId();
        $this->serviceId = $this->getService()->getServiceId();
    }
    
    /**
     * Метод активирует подписку. 
     * @param String $agreementId  Уникальный идентификатор подписки на сайте paypal
     * @return  SimpleSubscription
     */
    public function turnOn($agreementId){
        
        $this->status=self::STATUS_ON;
        $this->uniqueIdentificatorSubscription=$agreementId;
        $this->actionDate=  DateTimeHelper::timestampToMysqlDateTime();
        
        $saved = $this->save();
        
        return $saved;
    }
    
    /**
     * Метод активирует подписку. 
     * @param String $agreementId  Уникальный идентификатор подписки на сайте paypal
     * @return  SimpleSubscription
     */
    public function reactive(){
        
        $this->status=self::STATUS_ON;
        $this->actionDate=  DateTimeHelper::timestampToMysqlDateTime();
        $saved = $this->save();
        
        return $saved;
    }
    
    /**
     * Метод отменяет подписку. 
     * @return  SimpleSubscription
     */
    public function turnOff(){
        
        $this->status=  self::STATUS_OFF;
        $this->actionDate=DateTimeHelper::timestampToMysqlDateTime();
        $saved = $this->save();
        
        return $saved;
    }
    
    /**
     * Метод отменяет подписку когда пользователь ее еще не активировал, то есть в момент подтверждения подписки на сайте paypal 
     * @return  SimpleSubscription
     */
    public function fail(){
        
        $this->status=  self::STATUS_FAIL;
        $this->actionDate=DateTimeHelper::timestampToMysqlDateTime();
        $saved = $this->save();
        
        return $saved;
    }
    
    /**
     * Метод возвращает Уникальный идентификатор подписки
     * @return  String.
     */
    public function getUniqueIdentificatorSubscription(){
        return $this->uniqueIdentificatorSubscription;
    }
}