<?php

/**
 * Базовая. Модель пользователя. 
 * 
 * @author Sarychev Alexei <freddis336@gmail.com>
 * @package Hs\Models
 */
class BaseUser extends ActiveRecord implements IUser
{

    /**
     * Первичный ключ
     * 
     * @var Integer
     * @autogenerated 24-05-2016
     */
    public $id;

    /**
     * Имя пользователя
     * 
     * @var String
     * @autogenerated 24-05-2016
     */
    public $fullname = NULL;

    /**
     * Логин
     * 
     * @var String
     * @autogenerated 24-05-2016
     */
    public $name = NULL;

    /**
     * Адрес эл. почты
     * 
     * @var String
     * @autogenerated 24-05-2016
     */
    public $email = NULL;

    /**
     * Пароль
     * 
     * @var String
     * @autogenerated 24-05-2016
     */
    public $password = NULL;

    /**
     * Дата создания / регистрации
     * 
     * @sqltype DATETIME
     * @var String
     * @autogenerated 24-05-2016
     */
    public $creationDate;

    /**
     * Флаг подтвержденного телефона
     * 
     * @var Boolean
     * @autogenerated 24-05-2016
     */
    public $isVerified = false;

    /**
     * СМС код для подтверждения телефона
     * 
     * @var String
     * @autogenerated 24-05-2016
     */
    public $code = NULL;

    /**
     * Номер телефона
     * 
     * @var String
     * @autogenerated 24-05-2016
     */
    public $phoneNumber = null;

    /**
     * Адрес
     * 
     * @var String
     * @autogenerated 24-05-2016
     */
    public $address = null;

    /**
     * Дата подтверждения адреса электронной почты
     * 
     * @sqltype DATETIME
     * @var String
     * @autogenerated 24-05-2016
     */
    public $emailConfirmDate;
    
    
    /**
     * Является ли пользователь администратором
     * 
     * @var Boolean
     * @autogenerated 19-10-2016
     */
    public $isAdmin;

    public function __construct($scenario = 'insert')
    {
	parent::__construct($scenario);
	$this->creationDate = DateTimeHelper::timestampToMysqlDateTime();
    }

    /**
     * Генерация кода, который будет выслан в смс для проверки подлинности пользователя
     * 
     * @return String $code Сгенерированный код
     */
    public function generateSmsCode()
    {
	$code = EnvHelper::generateString(5);
	$this->code = $code;
	$this->isVerified = false;
	return $code;
    }

    /**
     * Проверка кода, высланного пользователю в смс
     * 
     * @param String $code Код введенный пользователем
     * @return boolean True в случае успеха
     */
    public function verify($code)
    {
	if ($this->code == $code)
	{
	    $this->isVerified = true;
	    return true;
	}
	return false;
    }

    /**
     * Устанавливает пользователю новый пароль.
     * 
     * @param String $string Новый пароль
     */
    public function setPassword($string)
    {
	$this->password = $this->encodePassword($string);
	return true;
    }

    /**
     * Кодирует строку для пароля.
     * 
     * @param String $string Пароль
     * @return String Закодированный пароль
     */
    public function encodePassword($string)
    {
	return md5("mr.salt".$string);
    }

    /**
     * Проверяет, полностью ли пользователь прошел регистрацию. Заполнил ли пользовтель
     * данные о способах оплаты и адресах доставки.
     * 
     * @return Boolean True, если пользователь заполнил данные
     */
    public function isRegistered()
    {
	return $this->addresses && $this->paymentWays;
    }

    /**
     * Проверяет явялется ли адрес эл. почты пользователя подтвержденным.
     * 
     * @return Boolean True, если пользователь подтвердил адрес эл. посты
     */
    public function isEmailConfirmed()
    {
	$ret = $this->emailConfirmDate != null;
	return $ret;
    }

    /**
     * Имя таблицы в БД
     * @return String
     */
    public function tableName()
    {
	return "users";
    }

    /**
     * Получение пользователя по сущности в авторизации Yii
     * 
     * @todo Переименовать в findByAppUser
     * @param {CWebUser} $identity Сущность пользователя
     * @return {User} Модель пользователя
     */
    public static function findByIdentity($identity = null)
    {
	if (!$identity)
	    $identity = Yii::app()->user;
	$criteria = new CDbCriteria();
	$criteria->addCondition(static::model()->getTableAlias() . '.   name = "' . $identity->name . '"');
	$model = static::model()->find($criteria);
	return $model;
    }
    
    /**
    * Получение пароля пользователя
    * 
    * return String Зашифрованный пароль
    */
    public function getEncodedPassword()
    {
        return $this->password;
    }
    
    /**
    * Получение имени пользователя
    * 
    * return String Имя пользователя
    */
   public function getName()
   {
       //Это базовый пользователь, поэтому так
       return $this->fullname;
   }
   
   /**
    * Получение логина пользователя
    * 
    * return String Логин пользователя
    */
   public function getLogin()
   {
       return $this->name;
   }
   
   /**
    * Устанавливает логина пользователя
    * 
    * @param String $login Логин пользователя
    */
   public function setLogin($login)
   {
       $this->name = $login;
   }
   
   /**
    * Установка адреса электронной почты
    * 
    * @param String $email Адрес почты
    */
   public function setEmail($email)
   {
       $this->email = $email;
   }
   
   /**
    * Получение адреса электронной почты
    * 
    * @return String Адрес почты
    */
   public function getEmail()
   {
       return $this->email;
   }
    
   /**
    * Подтверждение адреса электронной почты
    */
   public function confirmEmail()
   {
       $this->emailConfirmDate = DateTimeHelper::timestampToMysqlDateTime();
       $this->save();
   }
   
   /**
    * Установка имени пользователя
    * @param String $name Имя пользователя
    */
   public function setName($name)
   {     
       return $this->fullname = $name;
   }
   
   /**
    * Указывает пользователей администраторов
    * @return Boolean, true - если админ
    */
   public function isAdmin(){
       return false;
   }
}
