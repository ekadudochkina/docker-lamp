<?php

namespace Hs\Shop;

/**
 * Заказ интернет магазина
 * 
 * @package Hs\Shop
 * @property OrderPosition[] $positions Позиции заказа
 * @property Payment $payment Платеж по заказу
 * @autogenerated 09-01-2017 Merged
 */
class BaseOrder extends \ActiveRecord
{

    /**
     * Первичный ключ
     * 
     * @var Integer
     * @autogenerated 09-01-2017
     */
    public $id;

    /**
     * Имя получателя
     * 
     * @var String
     * @autogenerated 09-01-2017
     */
    public $fullname = null;

    /**
     * Адрес
     * 
     * @var String
     * @autogenerated 09-01-2017
     */
    public $address = null;

    /**
     * Почтовый индекс
     * 
     * @var String
     * @autogenerated 09-01-2017
     */
    public $postCode = null;

    /**
     * Страна
     * 
     * @var String
     * @autogenerated 14-01-2017
     */
    public $country;

    /**
     * Графство (в основном для английских стран)
     * 
     * @var String
     */
    public $county;

    /**
     * Город
     * 
     * @var String
     * @autogenerated 09-01-2017
     */
    public $city = null;

    /**
     * Номер телефона
     * 
     * @var String
     * @autogenerated 09-01-2017
     */
    public $phoneNumber = null;

    /**
     * Дополнительный адрес
     * 
     * @var String
     * @autogenerated 09-01-2017
     */
    public $address2 = null;

    /**
     * Дата создания
     * 
     * @sqltype DATETIME
     * @var String
     * @autogenerated 09-01-2017
     */
    public $creationDate;

    /**
     * Обработан ли заказ на стороне заказчика
     * 
     * @var Bool
     */
    public $isProcessed = false;

    /**
     * Платеж
     * <b>Внешний ключ.</b>
     * 
     * @update CASCADE
     * @delete RESTRICT
     * @var Integer
     * @autogenerated 09-01-2017
     */
    public $paymentId;

    public function __construct($scenario = 'insert')
    {
        $this->creationDate = \DateTimeHelper::timestampToMysqlDateTime();
        parent::__construct($scenario);
    }

    /**
     *  Возвращает правила валидации.
     * <b>Внимание: для полей у которых в БД тип VARCHAR необходимо создать валидатор "length".</b>
     * 
     * @return Array[] Массив правил валидации
     * @autogenerated 09-01-2017 Merged
     */
    public function rules()
    {
        $arr = parent::rules();
        $arr[] = array('creationDate', 'required');
        $arr[] = array('paymentId', 'numerical', 'integerOnly' => true);
        $arr[] = array('creationDate', 'type', 'type' => 'datetime', 'datetimeFormat' => 'yyyy-MM-dd hh:mm:ss');
        $arr[] = array('fullname,address,address2,country,postCode,city,phoneNumber,county', 'safe');
        $arr[] = array("isProcessed", "boolean");

        return $arr;
    }

    /**
     * Возвращает массив связей моделей.
     * <b>Внимание: связи BELONGS_TO являются внешними ключами.</b> Для них можно указать поведение при удалений родительской сущности.
     * 
     * @return Array[] Массив связей
     * @autogenerated 09-01-2017 Merged
     */
    public function relations()
    {
        $arr = parent::relations();
        $arr["positions"] = array(self::HAS_MANY, 'OrderPosition', 'orderId');
        $arr["payment"] = array(self::BELONGS_TO, 'Payment', 'paymentId');
        return $arr;
    }

    /**
     * Возвращает информацию о том, как называются поля на человеческом языке.
     * 
     * @return String[] Массив лейблов для полей (name=>label)
     * @autogenerated 09-01-2017 Merged
     */
    public function attributeLabels()
    {
        $arr = parent::attributeLabels();
        $arr["id"] = "Id";
        $arr["fullname"] = "Fullname";
        $arr["address"] = "Address";
        $arr["postCode"] = "Post code";
        $arr["city"] = "City";
        $arr["phoneNumber"] = "Phone number";
        $arr["address2"] = "Address";
        $arr["creationDate"] = "Creation date";
        $arr["paymentId"] = "Payment id";
        return $arr;
    }

    /**
     * Получение имени таблицы в базе данных
     * 
     * @autogenerated 09-01-2017
     * @return String Название таблицы
     */
    public function tableName()
    {
        return 'orders';
    }

    /**
     * Назначение товаров платежу
     * 
     * @param ShoppingCart $cart Корзина с товарами
     */
    public function assignItemsFromCart(ShoppingCart $cart)
    {
        for ($i = 0; $i < $cart->getRowNumber(); $i++)
        {
            $item = $cart->getItemForRow($i);
            $quantity = $cart->getQuantityForRow($i);
            $model = $this->createPosition($cart, $i);
            $model->setRelated($item);
            $model->quantity = $quantity;
            $model->price = $item->getPrice();
            $model->setRelated($this);
        }
        $payment = $this->generatePayment($cart);
        $this->setRelated($payment);
    }

    /**
     * Сохраняет модель в базе данных
     * 
     * @param Bool $runValidation Запускать ли валидацию
     * @param String[] $attributes Массив имен полей, которые необходимо сохранить
     * @return Bool True, в случае успеха
     */
    public function save($runValidation = true, $attributes = null)
    {
        $wasNew = $this->isNew();
        $result = parent::save($runValidation, $attributes);

        //bug::drop($wasNew,$result);
        if ($result && !$wasNew)
        {
            $newTitle = "Payment for order #" . $this->getPk();
            $this->payment->title = $newTitle;
            $result = $this->payment->save();
            //bug::DroP($result,$newTitle,$this->payment->title);
        }
        return $result;
    }

    /**
     * Создание платежа
     * @param ShoppingCart $cart
     * @return \Payment
     */
    protected function generatePayment(ShoppingCart $cart)
    {
        $price = $cart->getSubtotal();
        $payment = new \Payment();
        $payment->title = "Payment for order #";
        $payment->price = $price;
        $payment->start();
        return $payment;
    }

    /**
     * Создание позиции для заказа
     * 
     * @param ShoppingCart $cart
     * @param Number $i Строка
     * @return \SimpleOrderPosition
     */
    public function createPosition(ShoppingCart $cart, $i)
    {
        $model = new SimpleOrderPosition();
        return $model;
    }

    /**
     * Формирование строки адреса для отображения в интерфейсе
     * 
     * @return String Строка адреса
     */
    public function getAddressString()
    {
        return $this->address;
    }

    /**
     * Получение количества предметов в заказе (не путать позициями)
     * 
     * @return Integer Количество товаров
     */
    public function getItemNumber()
    {
        $result = 0;
        foreach ($this->positions as $position)
            $result += $position->quantity;

        return $result;
    }

    /**
     * Получение подытога (стоимости позиций)
     * 
     * @return Number Подытог
     */
    public function getSubtotal()
    {
        $total = 0;
        foreach ($this->positions as $position)
        {
            //bug::show($position);
            $total += $position->price * $position->quantity;
        }

        return $total;
    }

}
